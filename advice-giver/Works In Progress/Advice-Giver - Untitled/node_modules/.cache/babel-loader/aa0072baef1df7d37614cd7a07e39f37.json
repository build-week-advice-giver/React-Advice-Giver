{"ast":null,"code":"import _objectSpread from \"/Users/juanaleman/LambdaSchoolCode/BuildWeekUnit2/React-Advice-Giver/advice-giver/Works In Progress/Advice-Giver - Untitled/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/juanaleman/LambdaSchoolCode/BuildWeekUnit2/React-Advice-Giver/advice-giver/Works In Progress/Advice-Giver - Untitled/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/juanaleman/LambdaSchoolCode/BuildWeekUnit2/React-Advice-Giver/advice-giver/Works In Progress/Advice-Giver - Untitled/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/juanaleman/LambdaSchoolCode/BuildWeekUnit2/React-Advice-Giver/advice-giver/Works In Progress/Advice-Giver - Untitled/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/juanaleman/LambdaSchoolCode/BuildWeekUnit2/React-Advice-Giver/advice-giver/Works In Progress/Advice-Giver - Untitled/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/juanaleman/LambdaSchoolCode/BuildWeekUnit2/React-Advice-Giver/advice-giver/Works In Progress/Advice-Giver - Untitled/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/juanaleman/LambdaSchoolCode/BuildWeekUnit2/React-Advice-Giver/advice-giver/Works In Progress/Advice-Giver - Untitled/src/App.js\";\nimport React, { Component } from 'react';\nimport LocalizedStrings from 'react-localization';\nimport './App.css';\nimport ADVICEGIVERScreen from './ADVICEGIVERScreen.js';\nimport LoginScreen from './LoginScreen.js';\nimport DataSheet_localizationSheet from './DataSheet_localizationSheet.js';\nimport DataSheet_listData1 from './DataSheet_listData1.js';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(_props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, _props));\n\n    _this.windowDidResize = function () {\n      var w = window.innerWidth;\n      var formatId;\n      if (w < 576) formatId = 'narrow-phone';else if (w < 768) formatId = 'wide-phone';else if (w < 1024) formatId = 'narrow-tablet';else formatId = 'wide-tablet';\n\n      if (formatId !== _this.state.screenFormatId) {\n        _this.setState({\n          screenFormatId: formatId\n        });\n      }\n    };\n\n    _this.goToScreen = function (screenId, props) {\n      // This method is the default implementation and could be customized by a navigation plugin.\n      var screenIdx = -1; // Check if the screen is already in the history stack, and pop back if so\n\n      for (var i = 0; i < _this.screenHistory.length; i++) {\n        if (_this.screenHistory[i].currentScreen === screenId) {\n          screenIdx = i;\n          break;\n        }\n      }\n\n      if (screenIdx > -1) {\n        _this.screenHistory.splice(screenIdx + 1, _this.screenHistory.length - screenIdx - 1);\n\n        var prevScreenState = _this.screenHistory[screenIdx];\n\n        _this.setState(_objectSpread({}, prevScreenState, {\n          screenTransitionForward: false\n        }));\n      } else {\n        props = props || {};\n        var screenState = {\n          currentScreen: screenId,\n          currentScreenProps: props\n        };\n\n        _this.screenHistory.push(screenState);\n\n        _this.setState(_objectSpread({}, screenState, {\n          screenTransitionForward: true\n        }));\n      }\n\n      window.scrollTo(0, 0);\n    };\n\n    _this.goBack = function () {\n      // This method is the default implementation and could be customized by a navigation plugin.\n      if (_this.screenHistory.length < 2) return;\n\n      _this.screenHistory.splice(_this.screenHistory.length - 1, 1);\n\n      var prevScreenState = _this.screenHistory[_this.screenHistory.length - 1];\n\n      _this.setState(_objectSpread({}, prevScreenState, {\n        screenTransitionForward: false\n      }));\n\n      window.scrollTo(0, 0);\n    };\n\n    _this.getDataSheet = function (sheetId) {\n      // This method is the default implementation and could be customized by a state management plugin.\n      return _this.dataSheets[sheetId];\n    };\n\n    _this.addToDataSheet = function (sheetId, newRow, actionId) {\n      // This method is the default implementation and could be customized by a state management plugin.\n      var sheet = _this.dataSheets[sheetId];\n\n      if (sheet && newRow) {\n        sheet.addItem(newRow, _this['serviceOptions_' + sheetId] || {});\n      }\n\n      _this.setState({});\n    };\n\n    _this.updateInDataSheet = function (sheetId, row, actionId) {\n      // This method is the default implementation and could be customized by a state management plugin.\n      var sheet = _this.dataSheets[sheetId];\n\n      if (sheet && row) {\n        sheet.replaceItemByKey(row.key, row, _this['serviceOptions_' + sheetId] || {});\n\n        if (_this.state.currentScreenProps.dataSheetRow) {\n          var screenProps = _objectSpread({}, _this.state.currentScreenProps);\n\n          screenProps.dataSheetRow = row; // Also update any props that were carried into a detail view\n\n          for (var prop in screenProps) {\n            if (row[prop] !== undefined) {\n              screenProps[prop] = row[prop];\n            }\n          }\n\n          _this.setState({\n            currentScreenProps: screenProps\n          });\n        } else {\n          _this.setState({});\n        }\n      }\n    };\n\n    _this.removeFromDataSheet = function (sheetId, row) {\n      var sheet = _this.dataSheets[sheetId];\n\n      if (sheet && row) {\n        sheet.removeItem(row, _this['serviceOptions_' + sheetId] || {});\n      }\n\n      _this.setState({});\n    };\n\n    _this.updateDataSlot = function (slotId, value, actionId) {\n      // This method is the default implementation and could be customized by a state management plugin.\n      _this.dataSlots[slotId] = value;\n\n      if (slotId === 'ds_activeLang') {\n        _this.locStrings.setLanguage(value);\n      }\n\n      _this.setState({});\n    };\n\n    _this.dataSheetDidUpdate = function (dataSheet) {\n      // This method is the default implementation and could be customized by a state management plugin.\n      _this.setState({});\n    };\n\n    _this.updateLocalizationFromDataSheet = function (dataSheet) {\n      var stringsObj = dataSheet.getStringsByLanguage();\n\n      if (stringsObj && Object.keys(stringsObj).length > 0) {\n        _this.locStrings = new LocalizedStrings(stringsObj);\n      } else {\n        _this.locStrings = new LocalizedStrings({\n          en: {}\n        });\n      }\n\n      _this.locStrings.setLanguage(_this.dataSlots['ds_activeLang']);\n    };\n\n    _this.dataSheets = {};\n    _this.dataSheets['localizationSheet'] = new DataSheet_localizationSheet('localizationSheet', _this.dataSheetDidUpdate);\n    _this.dataSheets['listData1'] = new DataSheet_listData1('listData1', _this.dataSheetDidUpdate);\n    _this.dataSlots = {};\n    _this.dataSlots['ds_activeLang'] = \"en\";\n\n    _this.updateLocalizationFromDataSheet(_this.dataSheets['localizationSheet']);\n\n    _this.state = {\n      currentScreen: 'login',\n      currentScreenProps: {},\n      screenTransitionForward: true\n    };\n    _this.screenHistory = [_objectSpread({}, _this.state)];\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.windowDidResize();\n      window.addEventListener('resize', this.windowDidResize);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.windowDidResize);\n    }\n  }, {\n    key: \"isLoading\",\n    value: function isLoading() {\n      return this.state.loading;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var makeElementForScreen = function makeElementForScreen(screenId, baseProps, atTop, forward) {\n        var screenProps = _objectSpread({}, baseProps, {\n          atTopOfScreenStack: atTop,\n          transitionForward: forward,\n          appActions: _this2,\n          dataSheets: _this2.dataSheets,\n          locStrings: _this2.locStrings,\n          deviceInfo: {\n            screenFormatId: _this2.state.screenFormatId\n          },\n          'ds_activeLang': _this2.dataSlots['ds_activeLang']\n        });\n\n        switch (screenId) {\n          default:\n            return null;\n\n          case 'advicegiver':\n            return React.createElement(ADVICEGIVERScreen, Object.assign({}, screenProps, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 179\n              },\n              __self: this\n            }));\n\n          case 'login':\n            return React.createElement(LoginScreen, Object.assign({}, screenProps, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 181\n              },\n              __self: this\n            }));\n        }\n      };\n\n      var screenEl = makeElementForScreen(this.state.currentScreen, this.state.currentScreenProps, true, this.state.screenTransitionForward);\n      var prevScreenEl = null;\n\n      if (this.screenHistory.length >= 2) {\n        // For transitions, we want to show the previous screen below\n        var prevScreenState = this.screenHistory[this.screenHistory.length - 2];\n        prevScreenEl = makeElementForScreen(prevScreenState.currentScreen, prevScreenState.currentScreenProps, false, this.state.screenTransitionForward);\n      }\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, prevScreenEl, screenEl);\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };","map":{"version":3,"sources":["/Users/juanaleman/LambdaSchoolCode/BuildWeekUnit2/React-Advice-Giver/advice-giver/Works In Progress/Advice-Giver - Untitled/src/App.js"],"names":["React","Component","LocalizedStrings","ADVICEGIVERScreen","LoginScreen","DataSheet_localizationSheet","DataSheet_listData1","App","props","windowDidResize","w","window","innerWidth","formatId","state","screenFormatId","setState","goToScreen","screenId","screenIdx","i","screenHistory","length","currentScreen","splice","prevScreenState","screenTransitionForward","screenState","currentScreenProps","push","scrollTo","goBack","getDataSheet","sheetId","dataSheets","addToDataSheet","newRow","actionId","sheet","addItem","updateInDataSheet","row","replaceItemByKey","key","dataSheetRow","screenProps","prop","undefined","removeFromDataSheet","removeItem","updateDataSlot","slotId","value","dataSlots","locStrings","setLanguage","dataSheetDidUpdate","dataSheet","updateLocalizationFromDataSheet","stringsObj","getStringsByLanguage","Object","keys","en","addEventListener","removeEventListener","loading","makeElementForScreen","baseProps","atTop","forward","atTopOfScreenStack","transitionForward","appActions","deviceInfo","screenEl","prevScreenEl"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport LocalizedStrings from 'react-localization';\nimport './App.css';\nimport ADVICEGIVERScreen from './ADVICEGIVERScreen.js';\nimport LoginScreen from './LoginScreen.js';\nimport DataSheet_localizationSheet from './DataSheet_localizationSheet.js';\nimport DataSheet_listData1 from './DataSheet_listData1.js';\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dataSheets = {};\n    this.dataSheets['localizationSheet'] = new DataSheet_localizationSheet('localizationSheet', this.dataSheetDidUpdate);\n    this.dataSheets['listData1'] = new DataSheet_listData1('listData1', this.dataSheetDidUpdate);\n\n    this.dataSlots = {};\n    this.dataSlots['ds_activeLang'] = \"en\";\n\n    this.updateLocalizationFromDataSheet(this.dataSheets['localizationSheet']);\n\n    this.state = {\n      currentScreen: 'login',\n      currentScreenProps: {},\n      screenTransitionForward: true,\n    }\n    this.screenHistory = [ {...this.state} ];\n\n  }\n\n  windowDidResize = () => {\n    let w = window.innerWidth;\n    let formatId;\n    if (w < 576) formatId = 'narrow-phone';\n    else if (w < 768) formatId = 'wide-phone';\n    else if (w < 1024) formatId = 'narrow-tablet';\n    else formatId = 'wide-tablet';\n    if (formatId !== this.state.screenFormatId) {\n      this.setState({screenFormatId: formatId});\n    }\n  }\n\n  componentDidMount() {\n    this.windowDidResize();\n    window.addEventListener('resize', this.windowDidResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.windowDidResize);\n  }\n\n  isLoading() {\n    return this.state.loading;\n  }\n\n  goToScreen = (screenId, props) => {\n    // This method is the default implementation and could be customized by a navigation plugin.\n\n    let screenIdx = -1;  // Check if the screen is already in the history stack, and pop back if so\n    for (let i = 0; i < this.screenHistory.length; i++) {\n      if (this.screenHistory[i].currentScreen === screenId) {\n        screenIdx = i;\n        break;\n      }\n    }\n    if (screenIdx > -1) {\n      this.screenHistory.splice(screenIdx + 1, this.screenHistory.length - screenIdx - 1);\n      let prevScreenState = this.screenHistory[screenIdx];\n      this.setState({...prevScreenState, screenTransitionForward: false});\n    }\n    else {\n      props = props || {};\n      let screenState = {currentScreen: screenId, currentScreenProps: props};\n      this.screenHistory.push(screenState);\n      this.setState({...screenState, screenTransitionForward: true});\n    }\n    window.scrollTo(0, 0);\n  }\n\n  goBack = () => {\n    // This method is the default implementation and could be customized by a navigation plugin.\n    if (this.screenHistory.length < 2)\n      return;\n\n    this.screenHistory.splice(this.screenHistory.length - 1, 1);\n    let prevScreenState = this.screenHistory[this.screenHistory.length - 1];\n    this.setState({...prevScreenState, screenTransitionForward: false});\n    window.scrollTo(0, 0);\n  }\n\n  getDataSheet = (sheetId) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    return this.dataSheets[sheetId];\n  }\n\n  addToDataSheet = (sheetId, newRow, actionId) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    let sheet = this.dataSheets[sheetId];\n    if (sheet && newRow) {\n      sheet.addItem(newRow, this['serviceOptions_'+sheetId] || {});\n    }\n    this.setState({});\n  }\n\n  updateInDataSheet = (sheetId, row, actionId) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    let sheet = this.dataSheets[sheetId];\n    if (sheet && row) {\n      sheet.replaceItemByKey(row.key, row, this['serviceOptions_'+sheetId] || {});\n\n      if (this.state.currentScreenProps.dataSheetRow) {\n        let screenProps = {...this.state.currentScreenProps};\n        screenProps.dataSheetRow = row;\n\n        // Also update any props that were carried into a detail view\n        for (let prop in screenProps) {\n          if (row[prop] !== undefined) {\n            screenProps[prop] = row[prop];\n          }\n        }\n        this.setState({currentScreenProps: screenProps});\n      } else {\n        this.setState({});\n      }\n    }\n  }\n\n  removeFromDataSheet = (sheetId, row) => {\n    let sheet = this.dataSheets[sheetId];\n    if (sheet && row) {\n      sheet.removeItem(row, this['serviceOptions_'+sheetId] || {});\n    }\n    this.setState({});\n  }\n\n  updateDataSlot = (slotId, value, actionId) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    this.dataSlots[slotId] = value;\n    if (slotId === 'ds_activeLang') {\n      this.locStrings.setLanguage(value);\n    }\n    this.setState({});\n  }\n\n  dataSheetDidUpdate = (dataSheet) => {\n    // This method is the default implementation and could be customized by a state management plugin.\n    this.setState({});\n  }\n\n  updateLocalizationFromDataSheet = (dataSheet) => {\n    const stringsObj = dataSheet.getStringsByLanguage();\n    if (stringsObj && Object.keys(stringsObj).length > 0) {\n      this.locStrings = new LocalizedStrings(stringsObj);\n    } else {\n      this.locStrings = new LocalizedStrings({en: {}});\n    }\n    this.locStrings.setLanguage(this.dataSlots['ds_activeLang']);\n  }\n\n  render() {\n    let makeElementForScreen = (screenId, baseProps, atTop, forward) => {\n      let screenProps = {\n        ...baseProps,\n        atTopOfScreenStack: atTop,\n        transitionForward: forward,\n        appActions: this,\n        dataSheets: this.dataSheets,\n        locStrings: this.locStrings,\n        deviceInfo: {\n          screenFormatId: this.state.screenFormatId\n        },\n        'ds_activeLang': this.dataSlots['ds_activeLang'],\n      };\n      switch (screenId) {\n        default:\n          return null;\n        case 'advicegiver':\n          return (<ADVICEGIVERScreen {...screenProps} />)\n        case 'login':\n          return (<LoginScreen {...screenProps} />)\n      }\n    }\n\n    let screenEl = makeElementForScreen(this.state.currentScreen, this.state.currentScreenProps, true, this.state.screenTransitionForward);\n    let prevScreenEl = null;\n    if (this.screenHistory.length >= 2) {  // For transitions, we want to show the previous screen below\n      let prevScreenState = this.screenHistory[this.screenHistory.length - 2];\n      prevScreenEl = makeElementForScreen(prevScreenState.currentScreen, prevScreenState.currentScreenProps, false, this.state.screenTransitionForward);\n    }\n\n    return (\n      <div className=\"App\">\n        {prevScreenEl}\n        {screenEl}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}